<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:ws="http://jax-ws.dev.java.net/spring/core"
       xmlns:wss="http://jax-ws.dev.java.net/spring/servlet"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
         http://jax-ws.dev.java.net/spring/core
        http://jax-ws.dev.java.net/spring/core.xsd
        http://jax-ws.dev.java.net/spring/servlet
        http://jax-ws.dev.java.net/spring/servlet.xsd
        http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.0.xsd">
        
    	<!-- Importa el data source -->
<!-- 	<import resource="applicationContextHibernate.xml" /> -->
    
    <jee:jndi-lookup expected-type="javax.sql.DataSource" id="dataSource" jndi-name="java:jboss/datasources/SpringbaseDS"/>
    
	<!-- Hibernate session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

		<property name="dataSource">
			<ref bean="dataSource" />
		</property>

		<property name="hibernateProperties">
			<props>
 	 			
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>				
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				
				<prop key="hibernate.format_sql">true</prop>				
				<prop key="hibernate.generate_statistics">true</prop>
				
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>bo.gob.aduana.base.model.Parametrizacion</value>
				<value>bo.gob.aduana.base.model.Usuario</value>
				<value>bo.gob.aduana.base.model.Aduana</value>
				<value>bo.gob.aduana.base.model.Consignatario</value>
				<value>bo.gob.aduana.base.model.Embalaje</value>
				<value>bo.gob.aduana.base.model.ManifiestoCabecera</value>
				<value>bo.gob.aduana.base.model.ManifiestoItem</value>
				<value>bo.gob.aduana.base.model.ManifiestoEstado</value>
				<value>bo.gob.aduana.base.model.Pais</value>
				<value>bo.gob.aduana.base.model.Placa</value>										
			</list>
		</property>	
		
	</bean>
    
    <context:annotation-config  />
	
	<context:component-scan base-package="bo.gob.aduana.base" />

	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
    
     
    <tx:annotation-driven transaction-manager="transactionManager"/>
	
	<mvc:annotation-driven />
    
    <bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
    
    <security:global-method-security secured-annotations="enabled" />
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" access-denied-page="/krams/auth/denied" >

		<security:form-login
				login-page="/rest/loginOut" 
				authentication-failure-url="/rest/loginOut" 
				default-target-url="/krams/main/common"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/rest/loginOut" 
				logout-url="/krams/auth/logout"/>
	
	</security:http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider user-service-ref="userDetailsService">
	        		<security:password-encoder ref="passwordEncoder"/>
	        </security:authentication-provider>
	</security:authentication-manager>
	
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	 <!-- An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	 <!-- john's password is admin, while jane;s password is user  -->
	 <security:user-service id="userDetailsService">
	    <security:user name="john" password="a94652aa97c7211ba8954dd15a3cf838" authorities="ROLE_USER, ROLE_ADMIN" />
	    <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
	  </security:user-service>
	 
    
</beans>